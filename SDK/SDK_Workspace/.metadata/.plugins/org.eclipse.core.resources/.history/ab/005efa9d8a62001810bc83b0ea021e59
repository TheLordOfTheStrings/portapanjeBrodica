/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "platform.h"
#include "vga_periph_mem.h"
#include "xparameters.h"
#include "maps.h"
#include "xiic.h"
#include "xintc.h"
#include "xil_exception.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define IIC_DEVICE_ID		XPAR_IIC_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
#define IIC_INTR_ID		XPAR_INTC_0_IIC_0_VEC_ID

/*
 * The following constant defines the address of the IIC device on the IIC bus.
 * Since the address is only 7 bits, this constant is the address divided by 2.
 */
#define SLAVE_ADDRESS		0x70	/* 0xE0 as an 8 bit number. */

#define RECEIVE_COUNT		25
//#define SEND_COUNT		25
#define SEND_COUNT		2

#define RECV_BUFF_SIZE 2

#define UP 0b00010000
#define DOWN 0b00000001
#define LEFT 0b00001000
#define RIGHT 0b00000010
#define CENTER 0b00000100
//starting positions for matrix printing
#define START_POSITION 1540
#define START_POSITION_LEFT 1460
/************************** Variable Definitions *****************************/

XIic IicInstance; /* The instance of the IIC device. */
XIntc InterruptController; /* The instance of the Interrupt Controller */

u8 WriteBuffer[SEND_COUNT]; /* Write buffer for writing a page. */
u8 ReadBuffer[RECEIVE_COUNT]; /* Read buffer for reading a page. */

u8 buf[25];

volatile u8 TransmitComplete;
volatile u8 ReceiveComplete;

volatile u8 SlaveRead;
volatile u8 SlaveWrite;

typedef enum {
	IDLE, LEFT_PRESSED, RIGHT_PRESSED, CENTER_PRESSED, DOWN_PRESSED, UP_PRESSED
} state_t;

/************************** Function Prototypes ******************************/

int SlaveWriteData(u8 simbol);
int SlaveReadData(u8 *BufferPtr, u16 ByteCount);
int initIICSlave(u16 IicDeviceId, u8 slaveAddress);
static int SetupInterruptSystem(XIic * IicInstPtr);
static void StatusHandler(XIic *InstancePtr, int Event);
static void SendHandler(XIic *InstancePtr);
static void ReceiveHandler(XIic *InstancePtr);

void print_matrix(int cursorPos, char c[]);
void print_char(Xuint32 BaseAddress, char c);
state_t detect_keypress();
int move_cursor(int cursor, state_t key_pressed);
void remove_edges(char* mask, char* map, int p);
int get_cursor_from_mem(int mem_location);
int get_mem_loc_from_cursor(int cursor_pos);
int main() {
	int completed_ships = 0;
	int set_cursor_here = START_POSITION;
	u8 buf[RECV_BUFF_SIZE];
	u8 win[1];
	typedef enum {
		IDLE,
		LEFT_PRESSED,
		RIGHT_PRESSED,
		CENTER_PRESSED,
		DOWN_PRESSED,
		UP_PRESSED
	} state_t;

	unsigned char string_s[] = "POTAPANJE BRODICA\n";
	unsigned char string_odabrali[] = "ODABRALI STE SIMBOL";
	unsigned char string_igrac[] = "IGRAC 2";
	unsigned char string_kamen[] = "KAMEN";
	unsigned char string_makaze[] = "MAKAZE";
	unsigned char string_papir[] = "PAPIR";
	unsigned char string_cekam[] = "CEKAM";
	unsigned char string_nereseno[] = "NERESENO";
	unsigned char string_pobeda_1[] = "IGRAC 1 POBEDJUJE";
	unsigned char string_pobeda_2[] = "IGRAC 2 POBEDJUJE";

	init_platform();
	initIICSlave(XPAR_AXI_IIC_0_DEVICE_ID, SLAVE_ADDRESS);
	u8 simbol;
	state_t state = IDLE;
//	state_t p_state = IDLE;
//	int button;
	int i;
	int j;

	while (1) {

		state = IDLE;
//		p_state = IDLE;

		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x00, 0x0); // direct mode   0
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0x3); // display_mode  1
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x08, 0x1); // show frame      2
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x0C, 0x1); // font size       3
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0xFFFFFF); // foreground 4
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x0000FF); // background color 5
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x18, 0xFF0000); // frame color      6

		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
		clear_graphics_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		set_cursor(395);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_cekam,
				5);

		set_cursor(4228);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_igrac,
				7);
		set_cursor(2652);

		//reading the sent number
		SlaveReadData(buf, sizeof(buf));
		int map_num = (int) (buf[0]);

		//printing the number of the sent matrix
		set_cursor(228);
		print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, map_num + 48);

		//printing the read matrix
		char* master_map = all_maps[map_num];
		print_matrix(START_POSITION, master_map);
		//choosing the random index of the matrix that we are going to use as slave matrix

		int random = rand() % 10;
		while (random == map_num)
			random = rand() % 10;

		char* slave_map = all_maps[random];
		//printing the slave matrix
		print_matrix(START_POSITION_LEFT, slave_map);
		//sending the random chosen number of the slave matrix
		//choosing the random index of the matrix that we are going to use as slave matrix
		SlaveWriteData(random);

		//printing the number of the sent matrix
		//TODO:implementirati logiku i sinhronizaciju oba korisnika
		set_cursor(220);
		print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, random + 48);

		set_cursor(373);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_s, 16);
		char whitespace = ' ';
		int frame_cnt = 0;
		bool slave_turn = false;
		int x;
		while (completed_ships < 20) {
//			slave_turn=true;
			while (slave_turn) {
				state_t key = IDLE;
				while (key != CENTER_PRESSED) {
					key = detect_keypress();
					int j = 0;
					for (j = 0; j < 1000000; j++) {
					}
					frame_cnt++;
					set_cursor_here = move_cursor(set_cursor_here, key);
					set_cursor(set_cursor_here);
					if (frame_cnt % 10 < 5) {
						print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
								whitespace);
					} else {
						print_matrix(START_POSITION, mask);
					}
				}

				x = get_mem_loc_from_cursor(set_cursor_here);
				//remove_edges(mask, map, x);

				if (master_map[x] == '0') {
					mask[x] = 'O';
					slave_turn = false;
					SlaveWriteData('+');
				} else if (slave_map[x] == '1') {
					mask[x] = 'X';
					master_map[x]='*';
					//remove_edges(mask, mapa, x);
					//
					completed_ships++;
					if (completed_ships == 20) {
						while(1) {
							set_cursor(550);
							clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
							for (i = 0; i < 10; i++) {
								if (i % 2 == 0) {
									print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "WIN",
											3);
									VGA_PERIPH_MEM_mWriteMemory(
											XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10,
											0x0000FF);			// foreground 4
									VGA_PERIPH_MEM_mWriteMemory(
											XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14,
											0xFFFFFF);			// background color 5
									for (j = -2500000; j < 2500000; j++)
										;
								} else {
									print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "WIN",
											3);
									VGA_PERIPH_MEM_mWriteMemory(
											XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10,
											0xFFFFFF);			// foreground 4
									VGA_PERIPH_MEM_mWriteMemory(
											XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14,
											0x0000FF);			// background color 5
									for (j = -2500000; j < 2500000; j++)
										;
								}
							}
						}
						break;
					}
				}
				print_matrix(START_POSITION, mask);
			}
			int k;
			//for (k = -10000000; k < 10000000; k++) {
			//}
			slave_turn = true;
			clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
			print_matrix(START_POSITION, mask);
			print_matrix(START_POSITION_LEFT, master_map);
			set_cursor(368);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_s,
					17);
			set_cursor(4228);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_igrac, 7);
			u8 flag = 0;
			while (flag!='+') {
				SlaveReadData(&flag, 8);
				if (flag == 'W') {
					while(1) {
						print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "YOU LOSE :(", 11);
					}
				}
			}
//			sendToSlave(x);
		}
		/*
		 while(1){
		 button = Xil_In32LE(XPAR_MY_PERIPHERAL_0_BASEADDR);

		 if((button & UP)==0) {
		 state = UP_PRESSED;
		 }else if ((button & DOWN) == 0) {
		 state = DOWN_PRESSED;
		 }else if ((button & RIGHT) == 0) {
		 state = RIGHT_PRESSED;
		 }else if ((button & LEFT) == 0) {
		 state = LEFT_PRESSED;
		 }else if ((button & CENTER) == 0) {
		 state = CENTER_PRESSED;
		 }else {
		 state = IDLE;
		 }

		 if(p_state != state){
		 break;
		 }
		 }
		 */

		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
		clear_graphics_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		set_cursor(4228);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_igrac,
				7);
		set_cursor(368);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_odabrali,
				19);

		switch (state) {
		case UP_PRESSED:
			set_cursor(1030);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_makaze, 6);
			simbol = 'M';
			break;
		case LEFT_PRESSED:
			set_cursor(1033);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_papir, 5);
			simbol = 'P';
			break;
		case RIGHT_PRESSED:
			set_cursor(1033);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_kamen, 5);
			simbol = 'K';
			break;
		case DOWN_PRESSED:
			break;
		case CENTER_PRESSED:
			break;
		case IDLE:
			break;
		}

		SlaveWriteData(simbol);
		SlaveReadData(win, sizeof(win));

		int winner = win[0];

		switch (winner) {
		case 0:
			set_cursor(1668);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_nereseno, 8);
			break;
		case 1:
			set_cursor(1652);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_pobeda_1, 17);
			break;
		case 2:
			set_cursor(1652);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,
					string_pobeda_2, 17);
			break;
		}

		if (winner == 2) {
			for (i = 0; i < 4; i++) {
				if (i % 2 == 0) {
					VGA_PERIPH_MEM_mWriteMemory(
							XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10,
							0x0000FF);							// foreground 4
					VGA_PERIPH_MEM_mWriteMemory(
							XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14,
							0xFFFFFF);					// background color 5
					for (j = -2500000; j < 2500000; j++)
						;
				} else {
					VGA_PERIPH_MEM_mWriteMemory(
							XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10,
							0xFFFFFF);							// foreground 4
					VGA_PERIPH_MEM_mWriteMemory(
							XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14,
							0x0000FF);					// background color 5
					for (j = -2500000; j < 2500000; j++)
						;
				}
			}
		} else {
			for (i = -10000000; i < 10000000; i++) {
			}
		}

		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0xFFFFFF);// foreground 4
		VGA_PERIPH_MEM_mWriteMemory(
				XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x0000FF);// background color 5
		i = 0;
	}

	return 0;
}

int initIICSlave(u16 IicDeviceId, u8 slaveAddress) {

	int Status;
	XIic_Config *ConfigPtr; /* Pointer to configuration data */

	/*
	 * Initialize the IIC driver so that it is ready to use.
	 */
	ConfigPtr = XIic_LookupConfig(IIC_DEVICE_ID);
	if (ConfigPtr == NULL ) {
		return XST_FAILURE;
	}

	Status = XIic_CfgInitialize(&IicInstance, ConfigPtr,
			ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Setup the Interrupt System.
	 */
	Status = SetupInterruptSystem(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Include the Slave functions.
	 */
	XIic_SlaveInclude();

	/*
	 * Set the Transmit, Receive and Status Handlers.
	 */
	XIic_SetStatusHandler(&IicInstance, &IicInstance,
			(XIic_StatusHandler) StatusHandler);
	XIic_SetSendHandler(&IicInstance, &IicInstance, (XIic_Handler) SendHandler);
	XIic_SetRecvHandler(&IicInstance, &IicInstance,
			(XIic_Handler) ReceiveHandler);

	/*
	 * Start the IIC device.
	 */
	Status = XIic_Start(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the Address as a RESPOND type.
	 */
	Status = XIic_SetAddress(&IicInstance, XII_ADDR_TO_RESPOND_TYPE,
			SLAVE_ADDRESS);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return Status;
}

/*****************************************************************************/
/**
 * This function reads a buffer of bytes  when the IIC Master on the bus writes
 * data to the slave device.
 *
 * @param	BufferPtr contains the address of the data buffer to be filled.
 * @param	ByteCount contains the number of bytes in the buffer to be read.
 *
 * @return	XST_SUCCESS if successful else XST_FAILURE.
 *
 * @note		None
 *
 ******************************************************************************/
int SlaveReadData(u8 *BufferPtr, u16 ByteCount) {
	int Status;
	int i;

	/*
	 * Set the defaults.
	 */
	ReceiveComplete = 1;

	/*
	 * Set the Global Interrupt Enable.
	 */
	XIic_IntrGlobalEnable(IicInstance.BaseAddress);

	/*
	 * Wait for AAS interrupt and completion of data reception.
	 */
	while ((XIic_IsIicBusy(&IicInstance) == TRUE) || ReceiveComplete) {
		if (SlaveRead) {
			XIic_SlaveRecv(&IicInstance, ReadBuffer, RECEIVE_COUNT);
			SlaveRead = 0;
		}
	}

	/*
	 * Disable the Global Interrupt Enable.
	 */
	XIic_IntrGlobalDisable(IicInstance.BaseAddress);

	/*
	 * Stop the IIC device.
	 */
	Status = XIic_Stop(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	for (i = 0; i < RECV_BUFF_SIZE; i++)
		BufferPtr[i] = ReadBuffer[i];

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
 * This function writes a buffer of bytes to the IIC bus when the IIC master
 * initiates a read operation.
 *
 * @param	ByteCount contains the number of bytes in the buffer to be
 *		written.
 *
 * @return	XST_SUCCESS if successful else XST_FAILURE.
 *
 * @note		None.
 *
 ******************************************************************************/
int SlaveWriteData(u8 simbol) {
	int Status;

	/*
	 * Set the defaults.
	 */
	TransmitComplete = 1;

	/*
	 * Set the Global Interrupt Enable.
	 */
	XIic_IntrGlobalEnable(IicInstance.BaseAddress);

	WriteBuffer[0] = simbol;

	/*
	 * Wait for AAS interrupt and transmission to complete.
	 */
	while ((XIic_IsIicBusy(&IicInstance) == TRUE) || TransmitComplete) {
		if (SlaveWrite) {
			XIic_SlaveSend(&IicInstance, WriteBuffer, SEND_COUNT);
			SlaveWrite = 0;
		}
	}

	/*
	 * Disable the Global Interrupt Enable bit.
	 */
	XIic_IntrGlobalDisable(IicInstance.BaseAddress);

	/*
	 * Stop the IIC device.
	 */
	Status = XIic_Stop(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

/****************************************************************************/
/**
 * This Status handler is called asynchronously from an interrupt context and
 * indicates the events that have occurred.
 *
 * @param	InstancePtr is not used, but contains a pointer to the IIC
 * 		device driver instance which the handler is being called for.
 * @param	Event indicates whether it is a request for a write or read.
 *
 * @return	None.
 *
 * @note		None.
 *
 ****************************************************************************/
static void StatusHandler(XIic *InstancePtr, int Event) {
	/*
	 * Check whether the Event is to write or read the data from the slave.
	 */
	if (Event == XII_MASTER_WRITE_EVENT) {
		/*
		 * Its a Write request from Master.
		 */
		SlaveRead = 1;
	} else {
		/*
		 * Its a Read request from the master.
		 */
		SlaveWrite = 1;
	}
}

/****************************************************************************/
/**
 * This Send handler is called asynchronously from an interrupt
 * context and indicates that data in the specified buffer has been sent.
 *
 * @param	InstancePtr is a pointer to the IIC driver instance for which
 *		the handler is being called for.
 *
 * @return	None.
 *
 * @note		None.
 *
 ****************************************************************************/
static void SendHandler(XIic *InstancePtr) {
	TransmitComplete = 0;
}

/****************************************************************************/
/**
 * This Receive handler is called asynchronously from an interrupt
 * context and indicates that data in the specified buffer has been Received.
 *
 * @param	InstancePtr is a pointer to the IIC driver instance for which
 * 		the handler is being called for.
 *
 * @return	None.
 *
 * @note		None.
 *
 ****************************************************************************/
static void ReceiveHandler(XIic *InstancePtr) {
	ReceiveComplete = 0;
}

/****************************************************************************/
/**
 * This function setups the interrupt system so interrupts can occur for the
 * IIC. The function is application-specific since the actual system may or
 * may not have an interrupt controller. The IIC device could be directly
 * connected to a processor without an interrupt controller. The user should
 * modify this function to fit the application.
 *
 * @param	IicInstPtr contains a pointer to the instance of the IIC  which
 *		is going to be connected to the interrupt controller.
 *
 * @return	XST_SUCCESS if successful else XST_FAILURE.
 *
 * @note		None.
 *
 ****************************************************************************/
static int SetupInterruptSystem(XIic * IicInstPtr) {
	int Status;

	if (InterruptController.IsStarted == XIL_COMPONENT_IS_STARTED) {
		return XST_SUCCESS;
	}

	/*
	 * Initialize the interrupt controller driver so that it's ready to use.
	 */
	Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above
	 * performs the specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(&InterruptController, IIC_INTR_ID,
			(XInterruptHandler) XIic_InterruptHandler, IicInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Start the interrupt controller so interrupts are enabled for all
	 * devices that cause interrupts.
	 */
	Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable the interrupts for the IIC device.
	 */
	XIntc_Enable(&InterruptController, IIC_INTR_ID);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XIntc_InterruptHandler,
			&InterruptController);

	/*
	 * Enable non-critical exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}
// ------------------------------DODATO---------------------------------------------
int get_cursor_from_mem(int mem_location) {
	int cursor_x, cursor_y;
	cursor_y = mem_location / 10;
	cursor_x = mem_location % 10;
	return START_POSITION + cursor_x * 4 + cursor_y * 160;
}

int get_mem_loc_from_cursor(int cursor_pos) {
	int mem_x, mem_y;
	cursor_pos -= START_POSITION;
	mem_y = cursor_pos / 160;
	mem_x = cursor_pos % 40 / 4;
	return mem_y * 10 + mem_x;
}
// ---------------------------------------------------------------------------------

void print_matrix(int cursorPos, char c[]) {

	int i = 0;
	for (i = 0; i < 100; i++) {
		if ((4 * (i % 10) == 0) && (i != 0)) {
			cursorPos += 160;
			set_cursor(cursorPos + 4 * (i % 10));
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, c[i]);

		} else {
			set_cursor(cursorPos + 4 * (i % 10));
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, c[i]);
		}
	}
}
state_t detect_keypress() {
	state_t state = IDLE;
	int button = Xil_In32LE(XPAR_MY_PERIPHERAL_0_BASEADDR);
	if ((button & UP) == 0) {
		state = UP_PRESSED;
	} else if ((button & DOWN) == 0) {
		state = DOWN_PRESSED;
	} else if ((button & RIGHT) == 0) {
		state = RIGHT_PRESSED;
	} else if ((button & LEFT) == 0) {
		state = LEFT_PRESSED;
	} else if ((button & CENTER) == 0) {
		state = CENTER_PRESSED;
	} else {
		state = IDLE;
	}

	return state;
}

int move_cursor(int cursor, state_t key_pressed) {
	bool right_edge, left_edge, up_edge, down_edge;

	int pos = get_mem_loc_from_cursor(cursor);

	left_edge = (pos % 10 == 0) ? true : false;
	right_edge = (pos % 10 == 9) ? true : false;
	down_edge = (pos >= 90) ? true : false;
	up_edge = (pos <= 9) ? true : false;

	if (key_pressed == LEFT_PRESSED)
		pos = (left_edge) ? pos : pos - 1;
	else if (key_pressed == RIGHT_PRESSED)
		pos = (right_edge) ? pos : pos + 1;
	else if (key_pressed == UP_PRESSED)
		pos = (up_edge) ? pos : pos - 10;
	else if (key_pressed == DOWN_PRESSED)
		pos = (down_edge) ? pos : pos + 10;
	else if (key_pressed == CENTER_PRESSED)
		pos = pos;

	return get_cursor_from_mem(pos);
}

void remove_edges(char* mask, char* map, int p) {

	set_cursor(165);

	int x = 0;
	for (x = 0; x < 100; x++) {
		if (p == x)
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, p);
	}
//    p==0 ? print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'Q') : print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'W');

	bool horizontal, vertical, single;
	bool right_edge, left_edge, up_edge, down_edge;
//	int upper, down, left, right;

//	int ship_size = 1;

	bool left_up, left_down, right_down, right_up;

	left_edge = (p % 10 == 0) ? true : false;
	right_edge = (p % 10 == 9) ? true : false;
	down_edge = (p > 90) ? true : false;
	up_edge = (p <= 9) ? true : false;

	left_up = left_edge && up_edge;
	left_down = left_edge && down_edge;
	right_down = right_edge && down_edge;
	right_up = right_edge && up_edge;

	if (up_edge) {
		vertical = (map[p] == '1' && (map[p + 10] == '1')) ? true : false;
	} else if (down_edge) {
		vertical = (map[p] == '1' && (map[p - 10] == '1')) ? true : false;
	} else if (!(up_edge || down_edge)) {
		vertical =
				(map[p] == '1' && (map[p + 10] == '1' || map[p - 10] == '1')) ?
						true : false;
	}

	if (left_edge) {
		horizontal = (map[p] == '1' && (map[p + 1] == '1')) ? true : false;
	} else if (right_edge) {
		horizontal = (map[p] == '1' && (map[p - 1] == '1')) ? true : false;
	} else if (!(left_edge || right_edge)) {
		horizontal =
				(map[p] == '1' && (map[p + 1] == '1' || map[p - 1] == '1')) ?
						true : false;
	}

	single = (!horizontal) && (!vertical);
/*
	int temp = p;
	if (horizontal) {
		if (!right_edge) {
			while (map[temp] == '1') {
				right = temp;
				temp += 1;
			}
		} else {
			right = temp;
		}
		temp = p;
		if (!left_edge) {
			while (map[temp] == '1') {
				left = temp;
				temp -= 1;
			}
		} else {
			left = temp;
		}
	}

	temp = p;
	if (vertical) {
		if (!down_edge) {
			while (map[temp] == '1') {
				upper = temp;
				temp -= 10;
			}
		} else {
			down = temp;
		}

		temp = p;
		if (!up_edge) {
			while (map[temp] == '1') {
				down = temp;
				temp += 10;
			}
		} else {
			upper = temp;
		}
	}
*/
	//int temp = p;
	if (single && map[p] == '1') {
		if (!up_edge && !left_edge && !right_edge && !down_edge) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'A');
			mask[p - 11] = '+';
			mask[p - 10] = '+';
			mask[p - 9] = '+';
			mask[p - 1] = '+';
			mask[p + 1] = '+';
			mask[p + 9] = '+';
			mask[p + 10] = '+';
			mask[p + 11] = '+';
		}
		if (left_up) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'B');
			mask[p + 1] = '+';
			mask[p + 10] = '+';
			mask[p + 11] = '+';
		}
		if (right_up) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'C');
			mask[p - 1] = '+';
			mask[p + 10] = '+';
			mask[p + 9] = '+';
		}
		if (left_down) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'D');
			mask[p - 10] = '+';
			mask[p - 9] = '+';
			mask[p + 1] = '+';
		}
		if (right_down) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'E');
			mask[p - 11] = '+';
			mask[p - 10] = '+';
			mask[p - 1] = '+';
		}
		if (left_edge && !up_edge && !down_edge) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'F');
			mask[p + 1] = '+';
			mask[p + 10] = '+';
			mask[p + 11] = '+';
			mask[p - 10] = '+';
			mask[p - 9] = '+';
		}
		if (right_edge && !up_edge && !down_edge) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'G');
			mask[p - 1] = '+';
			mask[p + 10] = '+';
			mask[p + 9] = '+';
			mask[p - 11] = '+';
			mask[p - 10] = '+';
		}
		if (up_edge && !right_edge && !left_edge) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'H');
			mask[p + 1] = '+';
			mask[p + 10] = '+';
			mask[p + 11] = '+';
			mask[p - 1] = '+';
			mask[p + 9] = '+';
		}
		if (down_edge && !left_edge && !right_edge) {
			set_cursor(161);
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'I');
			mask[p + 1] = '+';
			mask[p - 1] = '+';
			mask[p - 9] = '+';
			mask[p - 11] = '+';
			mask[p - 10] = '+';
		}
	} else {
		set_cursor(161);
		print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'P');
	}

	print_matrix(START_POSITION, mask);

}
