/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include "platform.h"
#include "vga_periph_mem.h"
#include "xparameters.h"
#include "xiic.h"
#include "xintc.h"
#include "xil_exception.h"
#include "maps.h"
/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define IIC_DEVICE_ID		XPAR_IIC_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
#define IIC_INTR_ID		XPAR_INTC_0_IIC_0_VEC_ID

/*
 * The following constant defines the address of the IIC device on the IIC bus.
 * Since the address is only 7 bits, this constant is the address divided by 2.
 */
#define SLAVE_ADDRESS		0x70	/* 0xE0 as an 8 bit number. */

#define RECEIVE_COUNT		25
#define SEND_COUNT		25

#define PAGE_SIZE   2

typedef u8 AddressType;

#define UP 	   0b00010000
#define DOWN   0b00000001
#define LEFT   0b00001000
#define RIGHT  0b00000010
#define CENTER 0b00000100
//starting positions for matrix printing
#define START_POSITION 1540
#define START_POSITION_LEFT 1460
/************************** Variable Definitions *****************************/

/*
 * The following structure contains fields that are used with the callbacks
 * (handlers) of the IIC driver. The driver asynchronously calls handlers
 * when abnormal events occur or when data has been sent or received. This
 * structure must be volatile to work when the code is optimized.
 */
volatile struct {
	int  EventStatus;
	int  RemainingRecvBytes;
	int  RemainingSendBytes;
	int EventStatusUpdated;
	int RecvBytesUpdated;
	int SendBytesUpdated;
} HandlerInfo;

typedef enum {
	IDLE,
	LEFT_PRESSED,
	RIGHT_PRESSED,
	CENTER_PRESSED,
	DOWN_PRESSED,
	UP_PRESSED
} state_t;
/************************** Function Prototypes ******************************/

int initIICMaster(u16 IicDeviceId, u8 slaveAddress);
int recvFromSlave(u8* slavePtr);
int sendToSlave(u8 simbol);
static int SetupInterruptSystem(XIic * IicInstPtr);
static void StatusHandler(void *CallbackRef, int Status);
static void SendHandler(void *CallbackRef, int ByteCount);
static void RecvHandler(void *CallbackRef, int ByteCount);
void print_matrix(int cursorPos, char c[]);
state_t detect_keypress();
int get_cursor_from_mem(int mem_location) ;
int get_mem_loc_from_cursor(int cursor_pos);
int move_cursor(int cursor, state_t key_pressed);
void remove_edges(char* mask, char* map, int p);





// ----------------------------------------------------------------------------
XIic IicInstance;		/* The instance of the IIC device. */
XIntc InterruptController;	/* The instance of the Interrupt Controller */

/*
 * Write buffer for writing a page.
 */
u8 WriteBuffer[PAGE_SIZE];

volatile u8 TransmitComplete;
volatile u8 ReceiveComplete;
volatile u8 BusNotBusy;

int main()
{

	int completed_ships = 0;
	unsigned char string_s[] = "POTAPANJE BRODICA\n";
	unsigned char string_igrac[] = "IGRAC 1";
	u8 winner;

	init_platform();
	int Status;
	u8 slavePtr[2];
	u8 slaveSym;
	int i;
	int j;
	u8 simbol;

	int set_cursor_here = START_POSITION;
	Status =  initIICMaster(IIC_DEVICE_ID, SLAVE_ADDRESS);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}



	while(1){

		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x00, 0x0);// direct mode   0
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0x3);// display_mode  1
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x08, 0x1);// show frame      2
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x0C, 0x1);// font size       3
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0xFFFFFF);// foreground 4
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x0000FF);// background color 5
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x18, 0xFF0000);// frame color      6

		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
		clear_graphics_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		//char* mapa = map();
		//choosing the random index of the matrix that we are going to use as master matrix
		int random =rand()%10;
		char* map=all_maps[random];
		//TODO send matrix that has been chosen to slave
			sendToSlave(random);
			set_cursor(220);
			//the value in the table is reading the octal integer values
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR,48+random);
		set_cursor(368);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_s, 17);

		set_cursor(4228);

		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_igrac, 7);

		int frame_cnt = 0;
		char whitespace=' ';

		print_matrix(START_POSITION_LEFT, map);

		print_matrix(START_POSITION, mask);

		// provera sta se nalazi - nije programerska logika, nego sama logika igrice...
		// while (kraj_igre) -> while (na_potezu),potez se zavrsava ako se ne pogodi brodic,a ponavvlja se ako se pogodi brodic
		// TODO funkcija pretrazivanja brodica
		while (completed_ships<20) {
			bool my_turn=true;
			while(my_turn) {
				state_t key = IDLE;
				while (key!=CENTER_PRESSED) {
					key=detect_keypress();
					int j=0;
					for (j=0; j<1000000; j++) {}
					frame_cnt++;
					set_cursor_here = move_cursor(set_cursor_here, key);
					set_cursor(set_cursor_here);
					if (frame_cnt%6<3) {
						print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, whitespace);
					}
					else {
						print_matrix(START_POSITION, mask);
					}
				}

				int x = get_mem_loc_from_cursor(set_cursor_here);
				//remove_edges(mask, map, x);

				if (map[x]=='0') {
					mask[x]='O';
					my_turn=false;
				}
				else if (map[x]=='1') {
					mask[x]='X';
					//remove_edges(mask, mapa, x);
					//sendToSlave()
					completed_ships++;
					if (completed_ships==20) break;
					set_cursor(161);
				}

				print_matrix(START_POSITION, mask);
			}

			// sendToSlave(simbol);
		}

		set_cursor(550);
		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		for(i = 0; i < 10; i++) {
			if(i % 2 == 0) {
				print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "WIN", 3);
				VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0x0000FF);// foreground 4
				VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0xFFFFFF);// background color 5
				for(j = -2500000; j < 2500000; j++);
			}
			else {
				print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "WIN", 3);
				VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0xFFFFFF);// foreground 4
				VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x0000FF);// background color 5
				for(j = -2500000; j < 2500000; j++);
			}
		}






// ------------------------------------------------------------------------------------
		// cursor_temp_position sadrzi memorijsku lokaciju odabranog elementa
	/*	clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
		set_cursor(368);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_odabrali, 19);
		set_cursor(4228);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_igrac, 7);

	switch(state){
			case UP_PRESSED :
				set_cursor(1030);
				print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_makaze, 6);
				simbol = 'M';
				break;
			case LEFT_PRESSED :
				set_cursor(1033);
				print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_papir, 5);
				simbol = 'P';
				break;
			case RIGHT_PRESSED :
				set_cursor(1033);
				print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, string_kamen, 5);
				simbol = 'K';
				break;
			case DOWN_PRESSED :
				break;
			case CENTER_PRESSED :
				break;
			case IDLE:
				break;
		}
*/



		for(i = 0; i < 100000; i++){

		}

		recvFromSlave(slavePtr);

		slaveSym = slavePtr[0];

		if(simbol == slaveSym){
			set_cursor(1668);
			u8 rezultat[] = "NERESENO\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 8);
			winner = 0;
		}else if(simbol == 'K' && slaveSym == 'P'){
			set_cursor(1652);
			u8 rezultat[] = "IGRAC 2 POBEDJUJE\n";
			winner = 2;
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}else if(simbol == 'K' && slaveSym == 'M'){
			set_cursor(1652);
			winner = 1;
			u8 rezultat[] = "IGRAC 1 POBEDJUJE\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}else if(simbol == 'P' && slaveSym == 'M'){
			set_cursor(1652);
			winner = 2;
			u8 rezultat[] = "IGRAC 2 POBEDJUJE\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}else if(simbol == 'P' && slaveSym == 'K'){
			set_cursor(1652);
			winner = 1;
			u8 rezultat[] = "IGRAC 1 POBEDJUJE\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}else if(simbol == 'M' && slaveSym == 'K'){
			set_cursor(1652);
			winner = 2;
			u8 rezultat[] = "IGRAC 2 POBEDJUJE\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}else if(simbol == 'M' && slaveSym == 'P'){
			set_cursor(1652);
			winner = 1;
			u8 rezultat[] = "IGRAC 1 POBEDJUJE\n";
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, rezultat, 17);
		}

		for(i = 0; i < 1000000; i++){

		}

		sendToSlave(winner);

		if(winner == 1) {
			for(i = 0; i < 4; i++) {
				if(i % 2 == 0) {
					VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0x0000FF);// foreground 4
					VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0xFFFFFF);// background color 5
					for(j = -2500000; j < 2500000; j++);
				}
				else {
					VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0xFFFFFF);// foreground 4
					VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x0000FF);// background color 5
					for(j = -2500000; j < 2500000; j++);
				}
			}
		}
		else {
			for (i = -10000000; i < 10000000; i++){
			}
		}


		i = 0;
	}

 	return 0;
}


int initIICMaster(u16 IicDeviceId, u8 slaveAddress) {
	int Status;
	XIic_Config *ConfigPtr;	/* Pointer to configuration data */

	/*
	 * Initialize the IIC driver so that it is ready to use.
	 */
	ConfigPtr = XIic_LookupConfig(IicDeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}

	Status = XIic_CfgInitialize(&IicInstance, ConfigPtr,
					ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Setup handler to process the asynchronous events which occur,
	 * the driver is only interrupt driven such that this must be
	 * done prior to starting the device.
	 */
	XIic_SetRecvHandler(&IicInstance, (void *)&HandlerInfo, RecvHandler);
	XIic_SetSendHandler(&IicInstance, (void *)&HandlerInfo, SendHandler);
	XIic_SetStatusHandler(&IicInstance, (void *)&HandlerInfo,
					StatusHandler);

	/*
	 * Connect the ISR to the interrupt and enable interrupts.
	 */
	Status = SetupInterruptSystem(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Start the IIC driver such that it is ready to send and
	 * receive messages on the IIC interface, set the address
	 * to send to which is the temperature sensor address
	 */
	XIic_Start(&IicInstance);
	XIic_SetAddress(&IicInstance, XII_ADDR_TO_SEND_TYPE, slaveAddress);

	return Status;
}

int recvFromSlave(u8* slaveDataPtr) {
	int Status;
	/*
	 * Clear updated flags such that they can be polled to indicate
	 * when the handler information has changed asynchronously and
	 * initialize the status which will be returned to a default value
	 */
	HandlerInfo.EventStatusUpdated = FALSE;
	HandlerInfo.RecvBytesUpdated = FALSE;
	Status = XST_FAILURE;

	/*
	 * Attempt to receive a byte of data from the temperature sensor
	 * on the IIC interface, ignore the return value since this example is
	 * a single master system such that the IIC bus should not ever be busy
	 */
	(void)XIic_MasterRecv(&IicInstance, slaveDataPtr, 2);

	/*
	 * The message is being received from the temperature sensor,
	 * wait for it to complete by polling the information that is
	 * updated asynchronously by interrupt processing
	 */
	while(1) {
		if(HandlerInfo.RecvBytesUpdated == TRUE) {
			/*
			 * The device information has been updated for receive
			 * processing,if all bytes received (1), indicate
			 * success
			 */
			if (HandlerInfo.RemainingRecvBytes == 0) {
				Status = XST_SUCCESS;
			}
			break;
		}

		/*
		 * Any event status which occurs indicates there was an error,
		 * so return unsuccessful, for this example there should be no
		 * status events since there is a single master on the bus
		 */
		if (HandlerInfo.EventStatusUpdated == TRUE) {
			break;
		}
	}

	return Status;
}

int sendToSlave(u8 simbol) {
	WriteBuffer[0] = simbol;

	IicInstance.Stats.TxErrors = 0;

	XIic_MasterSend(&IicInstance, WriteBuffer, PAGE_SIZE);
	while(XIic_IsIicBusy(&IicInstance)){
	}

	return XST_SUCCESS;
}

/****************************************************************************/
/**
* This Send handler is called asynchronously from an interrupt
* context and indicates that data in the specified buffer has been sent.
*
* @param	CallBackRef is a pointer to the IIC device driver instance which
*		the handler is being called for.
* @param	ByteCount indicates the number of bytes remaining to be received of
*		the requested byte count. A value of zero indicates all requested
*		bytes were received.
*
* @return	None.
*
* @notes	None.
*
****************************************************************************/
static void SendHandler(void *CallbackRef, int ByteCount){
	HandlerInfo.RemainingSendBytes = ByteCount;
	HandlerInfo.SendBytesUpdated = TRUE;
}

/*****************************************************************************/
/**
* This receive handler is called asynchronously from an interrupt context and
* and indicates that data in the specified buffer was received. The byte count
* should equal the byte count of the buffer if all the buffer was filled.
*
* @param	CallBackRef is a pointer to the IIC device driver instance which
*		the handler is being called for.
* @param	ByteCount indicates the number of bytes remaining to be received of
*		the requested byte count. A value of zero indicates all requested
*		bytes were received.
*
* @return	None.
*
* @notes	None.
*
****************************************************************************/
static void RecvHandler(void *CallbackRef, int ByteCount)
{
	HandlerInfo.RemainingRecvBytes = ByteCount;
	HandlerInfo.RecvBytesUpdated = TRUE;
}

/*****************************************************************************/
/**
* This status handler is called asynchronously from an interrupt context and
* indicates that the conditions of the IIC bus changed. This  handler should
* not be called for the application unless an error occurs.
*
* @param	CallBackRef is a pointer to the IIC device driver instance which the
*		handler is being called for.
* @param	Status contains the status of the IIC bus which changed.
*
* @return	None.
*
* @notes	None.
*
****************************************************************************/
static void StatusHandler(void *CallbackRef, int Status)
{
	HandlerInfo.EventStatus |= Status;
	HandlerInfo.EventStatusUpdated = TRUE;
}

/****************************************************************************/
/**
* This function setups the interrupt system so interrupts can occur for the
* IIC. The function is application-specific since the actual system may or
* may not have an interrupt controller. The IIC device could be directly
* connected to a processor without an interrupt controller. The user should
* modify this function to fit the application.
*
* @param	IicInstPtr contains a pointer to the instance of the IIC  which
*		is going to be connected to the interrupt controller.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
static int SetupInterruptSystem(XIic * IicInstPtr)
{
	int Status;

	if (InterruptController.IsStarted == XIL_COMPONENT_IS_STARTED) {
		return XST_SUCCESS;
	}

	/*
	 * Initialize the interrupt controller driver so that it's ready to use.
	 */
	Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the device driver handler that will be called when an
	 * interrupt for the device occurs, the handler defined above
	 * performs the specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(&InterruptController, IIC_INTR_ID,
				   (XInterruptHandler) XIic_InterruptHandler,
				   IicInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Start the interrupt controller so interrupts are enabled for all
	 * devices that cause interrupts.
	 */
	Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable the interrupts for the IIC device.
	 */
	XIntc_Enable(&InterruptController, IIC_INTR_ID);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				 (Xil_ExceptionHandler) XIntc_InterruptHandler,
				 &InterruptController);

	/*
	 * Enable non-critical exceptions.
	 */
	Xil_ExceptionEnable();


	return XST_SUCCESS;
}
/*----------------------------------NASE FUNKCIJE--------------------------------------*/
// 1450 prva + offset 104
void print_matrix(int cursorPos, char c[]) {

	int i=0;
	for (i=0; i<100; i++) {
		if ((4*(i%10)==0) && (i!=0)) {
			cursorPos+=160;
			set_cursor(cursorPos+4*(i%10));
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, c[i]);

		}
		else {
			set_cursor(cursorPos+4*(i%10));
			print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, c[i]);
		}
	}
}
// ------------------------------ BLAGE IZMENE -------------------------------------
state_t detect_keypress() {
	state_t state = IDLE;
	int button = Xil_In32LE(XPAR_MY_PERIPHERAL_0_BASEADDR);
	if ((button & UP) == 0) {
		state = UP_PRESSED;
	} else if ((button & DOWN) == 0) {
		state = DOWN_PRESSED;
	} else if ((button & RIGHT) == 0) {
		state = RIGHT_PRESSED;
	} else if ((button & LEFT) == 0) {
		state = LEFT_PRESSED;
	} else if ((button & CENTER) == 0) {
		state = CENTER_PRESSED;
	} else {
		state = IDLE;
	}

	return state;
}
// ---------------------------------------------------------------------------------

// ------------------------------DODATO---------------------------------------------
int get_cursor_from_mem(int mem_location) {
    int cursor_x, cursor_y;
    cursor_y = mem_location/10;
    cursor_x = mem_location%10;
    return START_POSITION + cursor_x*4 + cursor_y*160;
}

int get_mem_loc_from_cursor(int cursor_pos) {
    int mem_x, mem_y;
    cursor_pos -= START_POSITION;
    mem_y = cursor_pos/160;
    mem_x = cursor_pos%40/4;
    return mem_y*10 + mem_x;
}
// ---------------------------------------------------------------------------------


// ---------------------------OBAVLJENE VECE PROMENE -------------------------------
int move_cursor(int cursor, state_t key_pressed) {
    bool right_edge, left_edge, up_edge, down_edge;

    int pos = get_mem_loc_from_cursor(cursor);

	left_edge = (pos%10==0) ? true : false;
    right_edge = (pos%10==9) ? true : false;
    down_edge = (pos>=90) ? true : false;
    up_edge = (pos<=9) ? true : false;

    if (key_pressed==LEFT_PRESSED)
        pos = (left_edge) ? pos : pos-1;
    else if (key_pressed==RIGHT_PRESSED)
        pos = (right_edge) ? pos : pos+1;
    else if (key_pressed==UP_PRESSED)
        pos = (up_edge) ? pos : pos-10;
    else if (key_pressed==DOWN_PRESSED)
        pos = (down_edge) ? pos : pos+10;
    else if (key_pressed==CENTER_PRESSED)
        pos=pos;

    return get_cursor_from_mem(pos);
}

void remove_edges(char* mask, char* map, int p) {

	set_cursor(165);

	int x = 0;
	for (x=0; x<100; x++) {
		if (p==x) print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, p);
	}
//    p==0 ? print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'Q') : print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'W');

    bool horizontal, vertical, single;
    bool right_edge, left_edge, up_edge, down_edge;
    int upper, down, left, right;

    int ship_size=1;

    bool left_up, left_down, right_down, right_up;

    left_edge = (p%10==0) ? true : false;
    right_edge = (p%10==9) ? true : false;
    down_edge = (p>90) ? true : false;
    up_edge = (p<=9) ? true : false;

    left_up = left_edge && up_edge;
    left_down = left_edge && down_edge;
    right_down = right_edge && down_edge;
    right_up = right_edge && up_edge;


    if (up_edge) {
        vertical = (map[p]=='1' && (map[p+10]=='1')) ? true : false;
    } else if (down_edge) {
        vertical = (map[p]=='1' && (map[p-10]=='1')) ? true : false;
    } else if (!(up_edge || down_edge)){
        vertical = (map[p]=='1' && (map[p+10]=='1' || map[p-10]=='1')) ? true : false;
    }

    if (left_edge) {
        horizontal = (map[p]=='1' && (map[p+1]=='1')) ? true : false;
    } else if (right_edge) {
        horizontal = (map[p]=='1' && (map[p-1]=='1')) ? true : false;
    } else if (!(left_edge || right_edge)) {
        horizontal = (map[p]=='1' && (map[p+1]=='1' || map[p-1]=='1')) ? true : false;
    }

    single = (!horizontal) && (!vertical);

    int temp = p;
    if (horizontal) {
        if (!right_edge) {
            while (map[temp]=='1') {
                right=temp;
                temp+=1;
            }
        }
        else {
            right=temp;
        }
        temp=p;
        if (!left_edge) {
            while (map[temp]=='1') {
                left=temp;
                temp-=1;
            }
        }
        else {
            left=temp;
        }
    }

    temp = p;
    if (vertical) {
        if (!down_edge) {
            while (map[temp]=='1') {
                upper=temp;
                temp-=10;
            }
        }
        else {
            down=temp;
        }

        temp=p;
        if (!up_edge) {
            while (map[temp]=='1') {
                down=temp;
                temp+=10;
            }
        }
        else {
            upper=temp;
        }
    }



    temp=p;
    if (single && map[p]=='1') {
        if (!up_edge && !left_edge && !right_edge && !down_edge) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'A');
            mask[p-11]='+';
            mask[p-10]='+';
            mask[p-9]='+';
            mask[p-1]='+';
            mask[p+1]='+';
            mask[p+9]='+';
            mask[p+10]='+';
            mask[p+11]='+';
        }
        if (left_up) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'B');
            mask[p+1]='+';
            mask[p+10]='+';
            mask[p+11]='+';
        }
        if (right_up) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'C');
            mask[p-1]='+';
            mask[p+10]='+';
            mask[p+9]='+';
        }
        if (left_down) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'D');
            mask[p-10]='+';
            mask[p-9]='+';
            mask[p+1]='+';
        }
        if (right_down) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'E');
            mask[p-11]='+';
            mask[p-10]='+';
            mask[p-1]='+';
        }
        if (left_edge && !up_edge && !down_edge) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'F');
            mask[p+1]='+';
            mask[p+10]='+';
            mask[p+11]='+';
            mask[p-10]='+';
            mask[p-9]='+';
        }
        if (right_edge && !up_edge && !down_edge) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'G');
            mask[p-1]='+';
            mask[p+10]='+';
            mask[p+9]='+';
            mask[p-11]='+';
            mask[p-10]='+';
        }
        if (up_edge && !right_edge && !left_edge) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'H');
            mask[p+1]='+';
            mask[p+10]='+';
            mask[p+11]='+';
            mask[p-1]='+';
            mask[p+9]='+';
        }
        if (down_edge && !left_edge && !right_edge) {
        	set_cursor(161);
        	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'I');
            mask[p+1]='+';
            mask[p-1]='+';
            mask[p-9]='+';
            mask[p-11]='+';
            mask[p-10]='+';
        }
    }
    else {
    	set_cursor(161);
    	print_char(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, 'P');
    }

    print_matrix(START_POSITION, mask);

}
